# Define the microcache path.
fastcgi_cache_path /etc/nginx/cache levels=1:2 keys_zone=microcache:100m inactive=60m;

server {
    listen [::]:80;
    listen 80;

    server_name localhost;    
    index index.php;
    
    # Path for static files
    root /sites/example.com/bedrock/web;
    
    # Specify a charset
    charset utf-8;

    # Custom 404 page
    error_page 404 /404.html;
    
    # Include the basic h5bp config set
    include h5bp/basic.conf;

    location /wp-login.php { return 404; }
    location /xmlrpc.php { return 404; }

    location ~ [^/]\.php(/|$) {
        fastcgi_split_path_info ^(.+?\.php)(/.*)$;
        if (!-f $document_root$fastcgi_script_name) {
            return 404;
        }

        # Mitigate https://httpoxy.org/ vulnerabilities
        fastcgi_param HTTP_PROXY "";

        fastcgi_cache  microcache;
        fastcgi_cache_key $scheme$host$request_method$request_uri;
        fastcgi_cache_valid 200 304 10m;
        fastcgi_cache_use_stale updating;

        fastcgi_max_temp_file_size 1M;
        fastcgi_pass   unix:/var/run/php/php7.0-fpm.sock;
        fastcgi_index  index.php;
        fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;
        include        fastcgi_params;

        # Local variables to track whether to serve a microcached page or not.
        set $no_cache_set 0;
        set $no_cache_get 0;
        # If a request comes in with a X-Nginx-Cache-Purge: 1 header, do not grab from cache
        # But note that we will still store to cache
        # We use this to proactively update items in the cache!
        if ( $http_x_nginx_cache_purge ) {
          set $no_cache_get 1;
        }

        # If the user has a user logged-in cookie, circumvent the microcache.
        if ( $http_cookie ~* "comment_author_|wordpress_(?!test_cookie)|wp-postpass_" ) {
          set $no_cache_set 1;
          set $no_cache_get 1;
        }
        
        # fastcgi_no_cache means "Do not store this proxy response in the cache"
        fastcgi_no_cache $no_cache_set;
        # fastcgi_cache_bypass means "Do not look in the cache for this request"
        fastcgi_cache_bypass $no_cache_get;
    }

}